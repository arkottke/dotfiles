let g:pathogen_disabled = ['neocomplete', 'neosnippet', 'neosnippet-snippets',
            \'unite', 'vimproc', 'yankstack']
execute pathogen#infect()

" Text Settings
" -------------
set autoindent
set expandtab
set shiftwidth=4 	" auto-ident width when using cindent
set softtabstop=4 	" spaces added when hitting tab
set tabstop=8 		" real tab width

" General Settings
" ----------------
syntax on
filetype plugin indent on  

set autoindent
set backspace=indent,eol,start
set complete-=i
set incsearch
set laststatus=2
set number
set ruler
set showcmd
set smarttab

" turn on command line completion wild style
set wildmenu 
" ignore these list file extensions
set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,*.jpg,*.gif,*.png
            \,*.pdf,*.un~,*.swp
" turn on wild mode huge list
set wildmode=list:longest 

" GUI Settings
" ------------
"set background=light

if has('gui_running')
    colorscheme solarized
    set cursorline
    set lines=25 columns=90
endif

set guioptions=ce 
"              ||
"              |+-- use simple dialogs rather than pop-ups
"              +  use GUI tabs, not console style tabs
if has("gui_gtk2")
	set guifont=DejaVu\ Sans\ Mono\ 10
elseif has("win32") || has("win64")
	set guifont=DejaVu_Sans_Mono:h9:cANSI
endif

" Plugin Settings
" ---------------
" Supertab
let g:SuperTabDefaultCompletionType = "context"
autocmd FileType *
\ if &omnifunc != '' |
\   call SuperTabChain(&omnifunc, "<c-p>") |
\   call SuperTabSetDefaultCompletionType("<c-x><c-u>") |
\ endif

" CtrlP
let g:ctrlp_root_markers = ['.ctrlp']

"" " Unite
"" let g:unite_source_history_yank_enable = 1
"" let g:unite_winheight = 10
"" 
"" nnoremap <space>/ :Unite grep:.<CR>
"" nnoremap <space>y :Unite history/yank<CR>
"" nnoremap <space>s :Unite -quick-match buffer<CR>
"" 
"" nnoremap <C-p> :Unite -start-insert file_rec:!<CR>
"" call unite#filters#matcher_default#use(['matcher_fuzzy'])
"" call unite#filters#sorter_default#use(['sorter_rank'])
"" 
"" autocmd FileType unite call s:unite_settings()
"" 
"" function! s:unite_settings()
""   imap <buffer> <C-j>   <Plug>(unite_select_next_line)
""   imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
""   imap <silent><buffer><expr> <C-x> unite#do_action('split')
""   imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
""   imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
"" 
""   nmap <buffer> <ESC> <Plug>(unite_exit)
"" endfunction

" Sneak. Use f instead of s
nmap f <Plug>Sneak_s
nmap F <Plug>Sneak_S
xmap f <Plug>Sneak_s
xmap F <Plug>Sneak_S
omap f <Plug>Sneak_s
omap F <Plug>Sneak_S

" Jedi. Disable selecting first so that tab can be used to select the first.
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 1



"" " NeoComplete
"" " Use neocomplete
"" let g:neocomplete#enable_at_startup = 1
"" " Use smartcase.
"" let g:neocomplete#enable_smart_case = 1
"" " Set minimum syntax keyword length.
"" let g:neocomplete#sources#syntax#min_keyword_length = 3
"" " Don't close the preview
"" let g:neocomplete#enable_auto_close_preview = 0
"" let g:neocomplete#enable_auto_select = 1
"" 
"" " Plugin key-mappings.
"" inoremap <expr><C-g> neocomplete#undo_completion()
"" inoremap <expr><C-l> neocomplete#complete_common_string()
"" " Recommended key-mappings.
"" " <CR>: close popup and save indent.
"" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"" function! s:my_cr_function()
""   return neocomplete#close_popup() . "\<CR>"
""   " For no inserting <CR> key.
""   "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
"" endfunction
"" " <TAB>: completion.
"" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" " <C-h>, <BS>: close popup and delete backword char.
"" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"" inoremap <expr><C-y>  neocomplete#close_popup()
"" inoremap <expr><C-e>  neocomplete#cancel_popup()
"" 
"" if !exists('g:neocomplcache_force_omni_patterns')
""   let g:neocomplcache_force_omni_patterns = {}
"" endif
"" let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'
